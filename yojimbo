#!/bin/bash
#
#     ::: [ Yojimbo ] :::
# 
# Your-OS-Just-Interprets micro Bash Obfuscator
# 
# v1.3 ~> Nothing Works <~ 2019
#
# https://github.com/ZalgoNoise/yojimbo

usage_() {
    echo -e " # Welcome to the zScript Bash command obfuscator!\n"
    echo "This tool was designed to help you quickly convert"
    echo "ASCI characters into their byte, hex and dual-hex"
    echo "equivalent combinations, readable by bash"
    echo "The output string that this program gives you can be"
    echo "copy-pasted to a terminal to test its execution"
    echo -e "whichever you wrote in should be executed\n"
    echo "Options:"
    echo -e "\t [-B]\tconvert to Byte"
    echo -e "\t [-H]\tconvert to Hex"
    echo -e "\t [-D]\tconvert to Dual-Hex"
    echo -e "\t [-h]\tshows this help screen"
}

[[ -z $@  ]]    \
    && usage_ && exit 1

[[ ! "$1" =~ [-]["B|H|D|h"] ]] \
    && echo -e "It's mandatory to supply one of the available modes:\n" \
    && usage_ && exit 1

mode=( "byte_" "hex_" "dhex_" )


hex_() {
    local jar=($(echo -n $@  \
    |hexdump -C|cut -d'|' -f1\
    |sed -e 's/^\w*\ *//'))
    
    for i in ${jar[@]};do
        hchar+="\\x$i"
    done

    hstr="\$'$hchar' "
    unset hchar
}

dhex_() {
    local jar=($(echo -n $@  \
    |hexdump -C|cut -d'|' -f1\
    |sed -e 's/^\w*\ *//'))
    
    for i in ${jar[@]};do
        hchar+="\\u00$i"
    done

    hstr="\$'$hchar' "
    unset hchar
}

byte_() {
    local jar=($(echo -n $@ \
        | hexdump -b | sed 's/^\w*\ *//' ))

    for i in ${jar[@]};do
        hchar+="\\$i"
    done

    hstr="\$'$hchar' "
    unset hchar
}

outmsg() {
    echo "Your string representation for:"
    echo ${user_input[@]:1}
    echo "Can be executed as:"
    echo "$@"
}

run_() {
for i in ${refstr[@]};do
    ${mode[$modeset]} $i
    string+=$hstr; unset hstr
done
outmsg $string;unset string
}

user_input=( $(echo "$@") )

while getopts "BHDh" arg;do
    case $arg in
        B)
            modeset=0;
            refstr=($(echo ${user_input[@]:1}));            
            run_;
            exit 0;;
        H)
            modeset=1;
            refstr=($(echo ${user_input[@]:1}));            
            run_;
            exit 0;;
        D)
            modeset=2;
            refstr=($(echo ${user_input[@]:1}));            
            run_ ;
            exit 0;;
        h)
            usage_ ;
            exit 0 ;;
        ?)
            echo "Incorrect option.";
            usage_;
            exit 1;;

        -)
            echo "Please provide an option";
            usage_;
            exit 1 ;;
            
    esac
done


